todo
----
* AMap.mergeWith (Map other)
* AMap.computed (K key, Function<K,V> f)




* Documentation
  * JavaDoc
  * README.md
  * package.java

* AbstractImmutableSet
* add mutable JU code to benchmarks
* unit tests
  * forEach
  * stream, parallelStream
  * AIterator

* ASortedSet.reverseIterator()




* stream()
  * stream integration: collectors
  * spliterator()

* CHAMP algorithm
* tuning of RedBlackTree

* API
  * static factories a la Java 10
  * ACollection: permutations, combinations
  * ACollection: flatten
  * AMap withDerivedDefault, withDefaultValue, filterKeys, filterValues(?)
  * AIterator methods: see decompiled TreeIterator
  * toMap (?) (2x?)

  * partial order

* equals, hashCode
* Serializable
  * readResolve
  * uniqueness for None, empty, ...


// ACollection.flatten
// permutations, combinations

//AList: zip, zipWithIndex
// sortWith, sortBy, shuffle --> ACollection, produces AList?
// indexOfSlice (2x), lastIndexOfSlice (2x), containsSlice
// partition (ACollection?!), groupBy (ACollection?), splitAt, span, distinct (ACollection?!)
// reverseMap
// corresponds




//    AMap<K,V> withDefaultValue(V defaultValue);
//    AMap<K,V> withDefault(AFunction1<? super K, ? extends V, ? extends RuntimeException> function);
// filterKeys()
// mapValues()

